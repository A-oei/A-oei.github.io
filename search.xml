<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JQuery源码</title>
    <url>/2020/03/23/JQuery%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<p>目前来说<code>jquery</code>现在已经不能算是一个特别主流的框架，在现在数据驱动的理念下，<code>Vue</code>、<code>React</code>是目前的热门常用框架，但是个人感觉，对于刚入门的同学来说，了解<code>jquery</code>的源码对于我们更加深入的理解<code>javscript</code>语言有极大的帮助，对于大部分长期使用如<code>Vue</code>框架的开发者来说，可能很多人对原生<code>JavaScript</code>的开发已经生疏了，适当回顾<code>JQuery</code>的源码其实对我们对原生<code>JavaScript</code>的理解更加完善</p>
<p>本文分析的<code>JQuery2.0.3</code>版本内部实现原理，该版本已经去除了大量的对于旧版本浏览器的兼容性的处理，但是还是有部分源码是对不常见的浏览器进行处理，在看到这部分的时候如果感兴趣可以看一下，也可以直接跳过，个人一直认为学习旧版本浏览器的兼容是最没有收益的，不要在必然要被淘汰技术上浪费太多时间</p>
<p>为了节省篇幅，我们这里不会直接放<code>jquery</code>的源码，会在文章中标注出代码是在源码的那个段落，可以配合下面的<a href="http://code.jquery.com/jquery-2.0.3.js" target="_blank" rel="noopener">jquery官方源码</a>进行查看</p>
<h4 id="源码分析章节"><a href="#源码分析章节" class="headerlink" title="源码分析章节"></a>源码分析章节</h4><ul>
<li><p><a href="https://github.com/A-oei/JQuerySoundCode/blob/master/JQuery%E6%BA%90%E7%A0%81_1%20%E6%95%B4%E4%BD%93%E7%BB%93%E6%9E%84.md" target="_blank" rel="noopener">整体结构</a></p>
</li>
<li><p><a href="https://github.com/A-oei/JQuerySoundCode/blob/master/JQuery%E6%BA%90%E7%A0%81_1%20%E6%95%B4%E4%BD%93%E7%BB%93%E6%9E%84.md" target="_blank" rel="noopener">init方法</a></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>手写Vue常用插件</title>
    <url>/2020/03/17/%E6%89%8B%E5%86%99Vue%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="background-template-项目"><a href="#background-template-项目" class="headerlink" title="background_template 项目"></a>background_template 项目</h2><p>项目采用<code>vue</code>+<code>typescript</code>，模仿<a href="https://element.eleme.cn/#/zh-CN/component/installation" target="_blank" rel="noopener">element-ui</a>实现了一些常用的插件，样式基本参考了<code>element</code>框架，实现了部分常用的功能</p>
<ul>
<li><code>input</code>输入框</li>
<li><code>Message</code>消息提示</li>
<li><code>sidebar</code>侧边导航栏</li>
<li><code>Table</code>表格展示</li>
<li><code>Dialog</code>弹窗</li>
<li><code>Button</code>按钮</li>
<li><code>Card</code>展示面板</li>
<li><code>DatePicker</code>日期选择器</li>
<li><code>Dropdown</code>下拉菜单</li>
<li><code>Select</code>选择器</li>
<li><code>Pagination</code>分页器</li>
</ul>
<p>项目地址：<a href="https://github.com/A-oei/background_template" target="_blank" rel="noopener">https://github.com/A-oei/background_template</a></p>
<p>下载项目后依次执行以下命令可以查看效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>css实现一个斜边</title>
    <url>/2020/03/16/css%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%96%9C%E8%BE%B9/</url>
    <content><![CDATA[<p>遇到这样一个问题，如何用<code>css</code>实现一个下面的效果</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/3/16/170e3051eba99ee7?w=1056&h=417&f=png&s=6264" alt=""></p>
<p>看着很复杂的问题，其实很简单，我们知道利用<code>css</code>的<code>border</code>是可以画出一个三角形的，例如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test-wrap"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.test-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">50px</span> solid red;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid blue;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">50px</span> solid green;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">50px</span> solid pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://user-gold-cdn.xitu.io/2020/3/16/170e30578fe86bf0?w=562&h=483&f=png&s=6056" alt=""></p>
<p>我们也可以通过不同的组合形式，例如</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.test-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">50px</span> solid red;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">50px</span> solid pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://user-gold-cdn.xitu.io/2020/3/16/170e3067a3286bd4?w=219&h=216&f=png&s=2080" alt=""><br>如果要实现在页面中展示一个三角形，那么我们可以稍微修改下代码，将<code>border-top</code>设置为<code>transparent</code>，就可以实现下面的效果</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.test-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">50px</span> solid pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://user-gold-cdn.xitu.io/2020/3/16/170e306b0ff321ca?w=212&h=201&f=png&s=1369" alt=""></p>
<p>了解了这个方法之后我们就可以转换一下思路来完成之前的问题，如何画出一个有斜线的图形，我们可以同时画两个三角，将两个三角叠加，下面一层的颜色设置为图形的<code>border</code>颜色，上面一层的三角设置为北京颜色，将下面的三角的尺寸设置的比上面的要大<code>1px</code>（可以根据<code>border</code>的宽度适当调整）就可以实现上面的效果</p>
<p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer-triangle"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner-triangle"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outer-triangle</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">51px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">65px</span> solid black;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inner-triangle</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">64px</span> solid <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">1px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>JQuery源码解析_整体结构</title>
    <url>/2020/03/15/JQuery%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E6%95%B4%E4%BD%93%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>整体结构</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window,undefined</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//代码</span></span><br><span class="line">&#125;(<span class="built_in">window</span>))</span><br></pre></td></tr></table></figure>

<p><code>JQuery</code>最外层使用的匿名函数自执行结构，为了最大程度避免代码污染，防止冲突</p>
<p>传入参数window的主要目的有两点</p>
<ol>
<li><p>在尾端传入的参数是实参，表明在函数执行时第一个参数是<code>window</code>，这样就避免了在内部使用<code>window</code>时再次去外层查找，在<code>javascript</code>中<code>window</code>属于最顶层的变量，而根据<code>javscript</code>原型链的查找原则，函数会优先查找本身的变量，在查找不到的情况下逐步向上查找，所以如果在<code>window</code>没有作为参数传入到函数内部的情况下，会从底层一直查找到最顶层，浪费大量性能，在形参中传入第二个参数<code>undefined</code>，主要是考虑到在低版本浏览器中<code>undefined</code>的值是可以改变的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//IE7</span></span><br><span class="line"><span class="literal">undefined</span>=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span>); <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<p>在代码中我们可能会需要判断<code>变量值===undefined</code>的情况，为了避免我们获取的<code>undefined</code>的值是被改变过的值，我们在形参中传入一个参数，由于在实参中没有传入对应的值，那么这个值本身就是undefined，所以我们在使用undefined时就可以直接使用该值，而不用担心是否在操作改变过的undefined</p>
</li>
<li><p>为压缩代码做考虑，如果window不是参数而只是一个变量，那么window字段将无法被压缩，但如果只是作为形参的情况下可以被压缩为单字符，实际上我们看压缩后的代码。window被压缩成了e</p>
</li>
</ol>
<p><strong>JQuery返回的是一个对象</strong>，JQuery采用的是面向对象的写法，在我们平常使用面向对象的写法大概如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">A.prototype.init=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> A();</span><br><span class="line">a.init();</span><br></pre></td></tr></table></figure>

<p>而在使用JQuery时我们不需要new $()的形式来调用是因为JQuery采用了工厂模式，使我们可以采用无”new”的形式来创建对象，大概写法如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">JQuery</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  rrturn <span class="keyword">new</span> Jquery.fn.init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样的好处在于</p>
<ol>
<li>我们直接执行了init的初始化方法</li>
<li>直接返回一个JQuery的对象，用户不需要调用new JQuery( )后再来调用JQuery的方法</li>
</ol>
<p>但我们会发现在JQuery中返回的是JQuery原型上的init方法，但是JQuery中的其他方法是写在JQuery的prototype上的，那么是如何在init上调用其它方法的呢，主要是通过下面代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//96行</span></span><br><span class="line">JQuery.fn=JQuery.prototype=&#123;</span><br><span class="line">  <span class="keyword">constructor</span>:JQuery,</span><br><span class="line">  //...</span><br><span class="line">&#125;</span><br><span class="line">//指定JQuery的fn就是JQuery的原型对象</span><br><span class="line"></span><br><span class="line">//283行</span><br><span class="line">JQuery.fn.init.prototype=JQuery.fn；</span><br></pre></td></tr></table></figure>

<p>JQuery通过将init的原型赋值为JQuery的原型，所以通过new JQuery.fn.init()出的对象可以直接使用JQuery原型上的方法</p>
<p>在8826行将JQuery对象挂载到window下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.JQuery=<span class="built_in">window</span>.$=JQuery;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
</search>
